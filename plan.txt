Plan for future development
===========================

2.0 Changes
-----------

1: To differentiate compile-time and run-time operations and to make it clear
   that run-time changes to program are not allowed
   
  - consult facts to be renamed to consult
  - old consult to be renamed to include
  - include and dynamic are allowed only in directives 
  - only dynamic facts can be consulted
  - only dynamic facts can be asserted and retracted  
  
2. If compile time errors occur, new files will be included, but program shall
   not be started.

3. What about including (optional) Turbo Prolog like type declarations to reveal
   inconsistencies in compile time.
   
1.4 Changes
-----------

* Muutetaan virheilmoitukset System.err -> Jalog.err

* Jos annetaan, tai pitäisi antaa virheilmoitus, niin -> Poikkeus!

* Yritetään saada virheilmoitukset niistä, jotka nyt feilaavat hiljaisesti.

* only dynamic facts can be asserted and retracted  


String manipulation 1.4.0
-------------------------
1:'([a-z]|[A-Z])+'

[0-9]+
' '
','
'''
'('
')'
'&'
'#'
'+'
'='

'auto+maatti = automaatti'
 0123456789012345678901234
1:'auto' 11:'+' 1:'maatti' 4:' ' 12:'=' 4:' ' 1:'automaatti'
1:(0,4), 11:(4,1), 1:(5,6), 4:(11,1), 12:(12,1), 4(13,1), 1:(14,10)


Predikaatteja ehdolle
=====================

string_chlist(string, charlist)

frontchar(S,H,S1)  - sisäinen substring-esitystapa?

fronttoken(String1, Token, Rest) - mites olisi arity4, jossa re

frontstr(NumberOfChars, String1, StartStr, EndStr) /* (i,i,o,o) */

concat(String1, String2, String3) /* (i,i,o), (i,o,i), (o,i,i), (i,i,i) */

str_len(StringArg, Length) /* (i,o), (i,i), (o,i) */

isname(String) - tai jotain sen tapaista

charAt(S, Pos, C) - toisella flowpatternilla etsii merkin, bäkträkätessä seuraavan.

substring(Str_in,Pos,Len,Str_out) /* (i,i,i,o) */ - toisella flowpatternilla etsii substringin, bäkträkätessä seuraavan. 

upper_lower(S1, S2) /* (i,i), (i,o), (o,i) */

str_repeat(N, Si, So) /* (i,i,o), (i,i,i) */

char_code(C, I) /* (i,o), (o,i), (i,i) */ - 16 bit int

is_high_surrogate(C) /* (i) C on char tai int */
is_low_surrogate(C) /* (i) C on char tai int */

str_term(S, T) /* (i,i), (i,o), (o,i) */
// Tulevaisuudessa myös:
//   term_str(Domain,Term,String) /* (i,i,o),(i,_,i) */

---------

Aloitetaan substring ja concat predikaateilla.

============================
Predicates
----------

  asserta
  
  assertz -- done
  
  bitand
  
  bitnot
  
  bitor
  
  bitxor
  
  bitleft
  
  bitright
  
  bound -- done
  
  comline - gives command line
  
  comline_arg -- done
  
  dynamic -- done
  
  fail -- done
  
  foreach_ -- done
  
  not -- done
  
  readchar(char c)
  
  readint
  
  readln
  
  readreal
  
  readterm
  
  trap -- done
  
  nl
  
  write --done
  
  writedevice
  
  writef

  writeln  -- done
  
  writeq -- done
  
  closefile
  
  consult -- done
  
  consult_data -- done
  
  consult_dir -- done
  
  deletefile
  
  dir
  
  disk
  
  eof
  
  existfile
  
  filepos
  
  file_str
  
  filemode
  
  flush
  
  openappend
  
  openmodify
  
  openread
  
  openwrite
  
  readdevice
  
  renamefile
  
  save
  
  writedevice
  
  concat
  
  frontchar
  
  frontstr
  
  fronttoken
  
  isname
  
  str_len
  
  char_int
  
  str_char
  
  str_int
  
  str_real
  
  upper_lower
  
  consult
  
  retract
  
  save
  
  date
  
  time
  
  trace
  
  equal
  
  exit -- done
  
  findall
  
  free
  
Not in Turbo Prolog 1.0

  format
  
  int_real
  
  str_term
  
  is_integer
  
  is_char
  
  is_real
  
  is_string
  
  is_list
  
  is_compound
  
  
Functions

  random
  
  abs
  
  round
  
  cos
  
  sin
  
  tan
  
  arctan
  
  exp
  
  ln
  
  log
  
  sqrt
  
  
  
  
  
  